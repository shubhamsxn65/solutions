#include<queue>
#include<iostream>
#include<stdio.h>
#include<list>
using namespace std;
class Graph{
	int v_no;
	list<int> *adj;
	public:
		int * visited;
		Graph(int v_no)
		{
			this->v_no=v_no;
			this->adj= new list<int> [v_no];
			this->visited=new int [v_no];
			for(int i=0;i<v_no;i++)
				visited[i] = -1;
		}
		void addEdge(int start, int end)
		{
			adj[start].push_back(end);
		}
		void display()
		{
			for(int i=0;i<v_no;i++)
				printf("%d ",visited[i]);
		}
		bool find_bug(int,int);
};


bool Graph::find_bug(int node,int gender)
{
	if((visited[node]==-1))
	{
		//printf("\t%d=n %d=g\n",node+1,gender);
		visited[node]=gender;
		list<int> :: iterator i;
		gender=gender?0:1;
		for(i=adj[node].begin();i!=adj[node].end();i++)
		{
			//printf("%d=n %d=i\n",node+1,*i+1);
			if(!find_bug((*i),gender))
				return false;
		}
		return true;
	}
	else if((visited[node]==gender))
		return true;
	else	
	{
		//printf("%d=n\n",node+1);
		return false;
	}
}
int get_int()
{
	char c;
	int ans=0;
	c=getc_unlocked(stdin);
	while(c>47)
	{	
		ans=(ans*10) + (c-48);
		c=getc_unlocked(stdin);
	}
	return ans;
}
int main()
{
	int t,i,k=1,v_no,edges,start,end;
	bool x;
	t=get_int();
	while(t--)
	{
		v_no=get_int();
		edges=get_int();
		Graph obj(v_no);
		for(i=0;i<edges;i++)
		{
			start=get_int();
			end=get_int();
			obj.addEdge(start-1,end-1);
			obj.addEdge(end-1,start-1);
		}
		int flag=0;
		printf("Scenario #%d:\n",k++);
		for(i=0;i<v_no && !flag;i++)
			if(obj.visited[i]==-1)
			{
				if(!obj.find_bug(i,0))
				{
					printf("Suspicious bugs found!\n");
					flag=1;
					break;
				}
			}
		if(!flag)
			printf("No suspicious bugs found!\n");
	}
	return 0;
}
