#include<stdio.h>
#include<stdlib.h>
void mergesort(int a[], int low, int high)
 { 
 	int i = 0;
 	int length = high - low + 1; 
 	int pivot  = 0; 
 	int merge1 = 0; 
 	int merge2 = 0; 
	int working[length]; 
 	if(low == high)  
  		return;  
	pivot  = (low + high) / 2; 
	mergesort(a, low, pivot);
	mergesort(a, pivot + 1, high); 
        for(i = 0; i < length; i++)  
                working[i] = a[low + i]; 
        merge1 = 0; 
        merge2 = pivot - low + 1; 
        for(i = 0; i < length; i++) 
        {  
        	if(merge2 <= high - low)   
        		if(merge1 <= pivot - low)    
        			if(working[merge1] > working[merge2]) 
            					a[i + low] = working[merge2++];  
             			else     a[i + low] = working[merge1++]; 
                 	else    a[i + low] = working[merge2++];
                else   a[i + low] = working[merge1++];
        }
}


int main()
{
	int t,ng,nm,*g,*m,i,j,c;
	scanf("%d",&t);
	while(t--)
	{
	c=getchar();
	scanf("%d%d",&ng,&nm);
	g=(int*)malloc(ng*sizeof(int));
	m=(int*)malloc(nm*sizeof(int));
	for(i=0;i<ng;i++)
		scanf("%d",(g+i));
	for(i=0;i<nm;i++)
		scanf("%d",(m+i));
	mergesort(g,0,ng-1);
	mergesort(m,0,nm-1);
	i=0;j=0;
	while(1)
	{
		if(g[i]>m[j])
			j++;
		else if(g[i]<m[j])
			i++;
		else if(g[i]==m[j])
			j++;
		if(i==ng)
		{
			printf("MechaGodzilla\n");
			break;
		}
		if(j==nm)
		{
			printf("Godzilla\n");
			break;
		}
	}
	}
	return 0;
}
		