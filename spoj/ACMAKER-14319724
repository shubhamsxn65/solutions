#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<string>
#include<map>
#include<iostream>
#include<sstream>
using namespace std;
#define MP make_pair
#define PB push_back
#define MOD 1000000000
#define MAX 30
#define INF 999999999
#define X first
#define Y second

typedef pair<int,int> pii;
typedef pair< int, pii  > edge;
vector<string> w;
string acr;
int dp[101][101][101];
int fun(int idx_a,int idx_w,int word_pos)
{
	if(idx_a==acr.size() && idx_w==w.size()-1 && word_pos!=0)
		return 1;
	if(idx_a==acr.size() && idx_w==w.size() && word_pos==0)
		return 1;
	if(idx_a==acr.size() || idx_w==w.size())
		return 0;
	int & r = dp[idx_a][idx_w][word_pos];
	if(r!=-1)
		return r;
	int ans=0;
	if(word_pos!=0)
		ans+=fun(idx_a,idx_w+1,0);
	for(int i=word_pos;i<w[idx_w].size();i++)
	{
		if(acr[idx_a]==w[idx_w][i])
			ans+=fun(idx_a+1,idx_w,i+1);
	}
	return (r=ans);
}
int main()
{
	
	int k;
	string x;
	map<string,int> insig;
	while(scanf("%d",&k) && k!=0)
	{
		insig.clear();
		for(int i=0;i<k;i++)
		{
			cin>>x;
			insig[x]=1;
		}
		getline(cin,x);
		while(getline(cin,x) && x!="LAST CASE")
		{
			w.clear();
			memset(dp,-1,sizeof(dp));
			stringstream ss;
			ss<<x;
			ss>>acr;
			string a = acr;
			for(int i=0;i<acr.size();i++)
				acr[i]=tolower(acr[i]);
			while(ss>>x)
			{
				if(!insig[x])
					w.PB(x);
			}
			int res=fun(0,0,0);
			if(res==0)
				cout<<a<<" is not a valid abbreviation"<<endl;
			else
				cout<<a<<" can be formed in "<<res<<" ways"<<endl;
		}
	}
	return 0;
}