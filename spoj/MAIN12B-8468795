#include<stdio.h>
#include<math.h>
void Merge(long long int * ,int ,int ,int );
void MergeSort(long long int *array,int left,int right)
{
      	int mid = (left+right)/2;
        if(left<right)
        {
                MergeSort(array,left,mid);
                MergeSort(array,mid+1,right);
                Merge(array,left,mid,right);
        }
}
void Merge(long long int *array, int left, int mid, int right)
{
        long long int tempArray[right-left+1];
        int pos=0,lpos = left,rpos = mid + 1;
        while(lpos <= mid && rpos <= right)
        {
                if(array[lpos] < array[rpos])
                	tempArray[pos++] = array[lpos++];
                else
                        tempArray[pos++] = array[rpos++];
        }
        while(lpos <= mid)
		tempArray[pos++] = array[lpos++];
        while(rpos <= right)tempArray[pos++] = array[rpos++];
      	int iter;
        for(iter = 0;iter < pos; iter++)
        {
                array[iter+left] = tempArray[iter];
        }
        return;
}

int main()
{
	int n,l=0,k, count=0,t;
	long long out[1003],x,obj,i,j;
	int prime[1000011]={0};
	for(i=2;i*i<=1000000;i++)
	{
		if(!prime[i])
		{
			for(j=i;j*i<=1000000;j++)
			{
				//printf("%d ",j*i);
				prime[j*i]=1;
			}
		}
	}
	j=0;
	for(i=2;i<=1000000;i++)
		if(!prime[i])
			prime[j++]=i;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		k=0;
		while(n--)
		{
			scanf("%lld",&x);
			for(i=0;i<j && (prime[i]*prime[i])<=x;i++)
			{
				//printf("%d.",prime[i]);
				if(!(x%prime[i]))
				{
					out[k++]=prime[i];
					while(!(x%prime[i]))
						x=x/prime[i];
				}
			}
			if(x>1)
				out[k++]=x;
		}
		MergeSort(out,0,k-1);
		count=0;
		for(i=0;i<k;)
		{
			obj=out[i];
			out[count++]=obj;
			while(i<k && out[i]==obj)
				i++;
		}	
		printf("Case #%d: %d\n",++l,count);
		for(i=0;i<count;i++)
			printf("%lld\n",out[i]);
			
	}
	return 0;
}
