#include<stdio.h>
#include<stdlib.h>
struct node
{
	int flag;
	struct node* hash[10];
};
int count;
struct node * allocate(void)
{
	struct node * ptr;
	int i;
	ptr=(struct node *)malloc(sizeof(struct node));
	for(i=0;i<10;i++)
		ptr->hash[i]=NULL;
	ptr->flag=0;
	return ptr;
}
void insert(struct node *root,char *str)
{
	int i,c;
	if(count==1)
		return;
	if(!(*str))
	{
		root->flag=1;
		c=0;
		for(i=0;i<10;i++)
			if(root->hash[i]!=NULL)
				c=1;
		if(c==1)
			count=1;
		return ;
	}
	if(root->hash[*(str)-48]==NULL)
		root->hash[*(str)-48]=allocate();
	if(root->flag==1)
	{
		count=1;
		return ;
	}
	insert(root->hash[*(str)-48],str+1);
	
}
void deallocate(struct node * root)
{
	int i;
	if(root==NULL)
		return ;
	for(i=0;i<10;i++)
		if(root->hash[i]!=NULL)
			{
				deallocate(root->hash[i]);
				free(root->hash[i]);
			}
	return ;
}
int main()
{
	int t,n,i;
	char p[20];
	scanf("%d",&t);
	struct node*root1;
	while(t--)
	{
		scanf("%d",&n);
		count=0;
		root1=allocate();
		for(i=0;i<n;i++)
		{
			scanf("%s",p);
			insert(root1,p);
		}
		printf("%s\n",count?"NO":"YES");
		deallocate(root1);
		free(root1);
	}
	return 0;
}