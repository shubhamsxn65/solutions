#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<string>
#include<map>
#include<iostream>
#include<sstream>

using namespace std;

#define MP make_pair
#define PB push_back
#define MOD 1000000000
#define MAX 61
#define INF 999999999
#define X first
#define Y second

typedef pair<int,int> pii;
typedef pair< int, pii  > edge;
vector< pii > attch[MAX];
vector< pii> good;
int n,m,cnt;
int dp[61][3201];
int solve(int idx,int cap)
{
	//printf("%d %d\n",idx,cap);
	if(idx==cnt)
		return 0;
	int & r = dp[idx][cap];
	if(r!=-1)
		return r;
	int ans=solve(idx+1,cap);
	if(cap-good[idx].X >=0)
	{
		ans=max(ans,good[idx].X*good[idx].Y + solve(idx+1,cap-good[idx].X));
		if(attch[idx].size()>=1)
		{	
			for(int i=0;i<attch[idx].size();i++)
				if(cap-good[idx].X-attch[idx][i].X>=0)
					ans=max(ans,good[idx].X*good[idx].Y+attch[idx][i].X*attch[idx][i].Y 
						+solve(idx+1,cap-good[idx].X-attch[idx][i].X)); 
		}
		if(attch[idx].size()==2)
		{
			if(cap-good[idx].X-attch[idx][0].X-attch[idx][1].X>=0)
				ans=max(ans,good[idx].X*good[idx].Y+attch[idx][0].X*attch[idx][0].Y+attch[idx][1].X*attch[idx][1].Y 
					+solve(idx+1,cap-good[idx].X-attch[idx][0].X-attch[idx][1].X));
		}
	}
	return (r=ans)	;
}
int main()
{
	map< int,int> M;
	int t,v,c,u;
	scanf("%d",&t);
	while(t--)
	{
		good.clear();
		M.clear();
		cnt=0;
		memset(dp,-1,sizeof(dp));
		scanf("%d%d",&m,&n);
		for(int i=0;i<n;i++)
		{
			scanf("%d%d%d",&v,&c,&u);
			v/=10;
			if(u==0)
			{
				M[i]=cnt++;
				good.PB(MP(v,c));
			}
			else
				attch[M[u-1]].PB(MP(v,c));
		}
	/*	for(int i=0;i<cnt;i++)
		{
			printf("%d>>",i+1);
			for(int j=0;j<attch[i].size();j++)
				printf("%d ",attch[i][j].X);
			printf("\n");
		}*/
		printf("%d\n",10*solve(0,m/10));
		for(int i=0;i<cnt;i++)
			attch[i].clear();
	}
	return 0;
}