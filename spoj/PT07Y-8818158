#include<iostream>
#include<list>
#include<vector>
#include<cstdio>
#include<queue>

using namespace std;

class Graph
{
	int v_no;
	list<int> *adj;
	bool *visited;
	public:
		Graph(int v)
		{
			this->v_no=v;
			this->adj=new list<int> [v];
			this->visited= new bool [v];
			for(int i=0;i<v;i++)
				visited[i]=false;
		}
		void addedge(int start,int end){
			adj[start].push_back(end);}
		bool check(void)
		{
			for(int i=0;i<v_no;i++)
				if(visited[i]==false)
					return false;
			return true;
		}
		void DFS(int);
};

void Graph::DFS(int node)
{
	if(visited[node]==false)
	{
		visited[node]=true;
		list <int> :: iterator it;
		for(it=adj[node].begin();it!=adj[node].end();it++)
			DFS(*it);
		return;
	}
	return;
}

int main()
{
	int ver,edges,flag=0,start,end;
	scanf("%d%d",&ver,&edges);
	Graph G(ver);
	for(int i=0;i<edges;i++)
	{
		scanf("%d%d",&start,&end);
		G.addedge(start-1,end-1);
	}
	if(ver == edges+1)
	{
		G.DFS(0);
		if(G.check())
			flag=1;
	}
	printf("%s\n",flag?"YES":"NO");
	return 0;
}	