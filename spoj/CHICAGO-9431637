#include<cstdio>
#include<queue>
#include<vector>
#include<list>
#include<algorithm>

using namespace std;

#define INF 0
#define tr(c,i) for(typeof((c).begin()) i = (c).begin();i!=(c).end();i++)

typedef pair<double,int> ii;
typedef list<ii> lii;
typedef vector<double> vi;

class Graph
{
	vi D;
	lii *adj;
	int v_no;
	
	public:
		Graph(int v)
		{
			this->v_no = v;
			adj = new lii[v];
		}
		void addEdge(int from,int to,double w)
		{
			adj[from].push_back(ii(w,to));
		}
		void set(void)
		{
			D=vi(v_no,INF);
		}
		void dijkstra(int s)
		{
			priority_queue < ii, vector<ii> > Q;
			set();
			D[s]=100;
			Q.push( ii(D[s],s));
			while(!Q.empty())
			{
				ii node = Q.top();
				Q.pop();
				double d=node.first;
				int v=node.second;
				if(d>=D[v])
				{
					tr(adj[v],it)
					{
						int vertex=it->second;
						double weight=it->first;
						if(D[vertex]<((d*weight)/100))
						{
							
							D[vertex]=d*weight/100;
							Q.push( ii (D[vertex],vertex));
						}
					}
				}
			}
		}
		double result(int node)
		{
			return D[node];
		}
};

int main()
{	
	int u,v,w,e,v_n;
	while(scanf("%d",&v_n) && v_n)
	{
		scanf("%d",&e);
		Graph G(v_n);
		while(e--)
		{
			scanf("%d%d%d",&u,&v,&w);
			G.addEdge(u-1,v-1,w);
			G.addEdge(v-1,u-1,w);
		}
		G.dijkstra(0);
		printf("%.6lf percent\n",G.result(v_n-1));
	}
	return 0;
}
			