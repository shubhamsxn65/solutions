// A Dynamic Programming solution for subset sum problem
#include <stdio.h>
#define MAX 105
bool subset[100010][105];
// Returns true if there is a subset of set[] with sun equal to given sum
int isSubsetSum(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    
	int count=0;
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
      subset[0][i] = true;
 
    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
      subset[i][0] = false;
 
     // Fill the subset table in botton up manner
     for (int i = 1; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i >= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }
 
     // uncomment this code to print table
     for (int i = 0; i <= sum; i++)
     {
       for (int j = 1; j <= n; j++)
       {
		  if(subset[i][j] == 1)
		  {
			count+=i;
			
			break;
		  }
		  /*printf ("%4d", subset[i][j]);
       printf("\n");*/
	   }
     } 
	//printf("%d\n",count);
     return count;
}
 
// Driver program to test above function
/*int main()
{
  int set[] = {3, 34, 4, 12, 5, 2};
  int sum = 9;
  int n = sizeof(set)/sizeof(set[0]);
  if (isSubsetSum(set, n, sum) == true)
     printf("Found a subset with given sum");
  else
     printf("No subset with given sum");
  return 0;
}*/
int main()
{
	int n,ar[MAX],i,sum,ans,t,max;
	scanf("%d",&t);
	while(t--)
	{
		//memset(hash,0,sizeof(hash));
		scanf("%d",&n);
		max=0;
		for(i=0;i<n;i++)
		{
			scanf("%d",ar+i);
			max+=ar[i];
		}
		ans=isSubsetSum(ar, n, max);
		/*for(i=max;i>=0;i--)
		{
				if(issum(ar,i,n))
					ans+=i;
					//printf("me ans %d\n",ans);
		}*/
		printf("%d\n",ans);
		//printf("%d\n",issum(ar,6,n));
	}
	return 0;
}
